
makeCacheMatrix <- function( m = matrix() ) {

	## se inicializa la propiedad de la F inversa
    i <- NULL

    ## configuramos la matriz
    set <- function( matrix ) {
            m <<- matrix
            i <<- NULL
    }

    ## obtenemos la matriz 
    get <- function() {
    	## Return the matrix
    	m
    }

    ## establecemos la inversa de la matriz 
    setInverse <- function(inverse) {
        i <<- inverse
    }

    ## obtenemos la inversa de la matriz 
    getInverse <- function() {
        ## Return the inverse property
        i
    }

    ## devuelve una lista de metodos 
    list(set = set, get = get,
         setInverse = setInverse,
         getInverse = getInverse)
}


## Calcula la inversa de la matriz especial devuelta por "makeCacheMatrix"
## Si ya se ha calculado la inversa (y la matriz nocambiado)
## entonces el "cachesolve" debería recuperar el inverso del caché.
cacheSolve <- function(x, ...) {

    ## devuelve una matriz que es la inversa de'x'
    m <- x$getInverse()

    ## Just return the inverse if its already set
    if( !is.null(m) ) {
            message("getting cached data")
            return(m)
    }

    ## Obtenemos la matriz de nuestro objeto
    data <- x$get()

    ## calculamos la inversa usando la multiplicación de matrices
    m <- solve(data) %*% data

    ## Set the inverse to the object
    x$setInverse(m)

    ## Return the matrix
    m
}
